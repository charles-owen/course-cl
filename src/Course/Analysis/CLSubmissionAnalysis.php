<?php
/**
 * @file
 * Class for analysis of Visual Studio submissions to ensure validity.
 */

namespace CL\Course\Analysis;

use CL\Site\Site;


/**
 * Class for analysis of CLion submissions to ensure validity.
 *
 * This looks to ensure there are no directories named .idea, zip, cmake-*
 * and that the zip is valid and has CMakeLists.txt in the root directory.
 */
class CLSubmissionAnalysis extends Analysis {
	/// Tag for this analysis component
	const TAG = 'clsubmission';

	/**
	 * Perform a CLion integrity analysis
	 * @param Site $site The site object
	 * @param Analyzer $analyzer The analyzer for a submission
	 * @return void
	 * @throws AnalysisException If unable to unzip the solution or solution is invalid
	 */
	public function analyze(Site $site, Analyzer $analyzer) {
		// Get the unzipped version of the project
		$dir = $analyzer->get_unzipped_dir($site);
		if ($dir === null) {
			throw new AnalysisException("Unable to unzip solution: " .
                $analyzer->unzipError);
		}

        $hasCMakeLists = false;
        $d = -1;

		$dirIterator = new \RecursiveDirectoryIterator($dir);
		$iterator = new \RecursiveIteratorIterator($dirIterator,
			\RecursiveIteratorIterator::SELF_FIRST);
		foreach($iterator as $file) {
            $fileName = $file->getFilename();
            if($iterator->getDepth() < 1 && $fileName == "CMakeLists.txt") {
                $hasCMakeLists = true;
            }

            if($fileName == "CMakeLists.txt") {
                // Find the CMakeLists.txt file that is closest to the root.
                $depth = $iterator->getDepth();
                if($d < 0 || $depth < $d) {
                    $d = $depth;
                }
            }

			if(!$this->testPath($file->getRealPath())) {
				throw new AnalysisException("Submission was not generated by CLion plugin and cannot be accepted.");
			}
		}

        if(!$hasCMakeLists) {
            throw new AnalysisException('Submission is not a properly formatted CMake project. See <a href="https://cse335.egr.msu.edu/commonissues/submission/">Submission Issues</a> for how to fix this.');
        }
	}

	/**
	 * Test for files that should not exist in a submission
	 * @param string $file File name
	 * @return bool True if file is okay
	 */
	public function testPath($file) {
		$exclude = "#(\.zip|[\\\\/](\.idea|zip|(cmake-.*)|ipch|html))$#";
		return preg_match($exclude, $file) !== 1;
	}

	/**
	 * Get information about the analysis component
	 * @param Site $site The site object
	 * @return mixed Array with key 'name' or null if no info
	 */
	public function info(Site $site) {
		return null;
	}

	/**
	 * Present analysis for the user
	 * @param array $analysis The analysis array as stored with the submission
	 * @return string HTML nothing for this analysis...
	 */
	public function present(array $analysis) {
		return "";
	}

}